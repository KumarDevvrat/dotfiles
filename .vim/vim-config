"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Ignore svn files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*

" Enable mouse support in terminal
set mouse=a

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set syntax highlighting
syntax on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>g :e! ~/.vimrc<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vimrc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..
set so=7

set wildmenu "Turn on WiLd menu

set nocul " Don't Highlight the current line

set ruler "Always show current position

set cmdheight=2 "The commandbar height

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

set hidden

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers
set nolazyredraw "Don't redraw while executing macros

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set gfn=Courier\ 10\ Pitch\ 10.5
set shell=/bin/zsh
" set gfn=Droid\ Sans\ Mono\ 9
" set gfn=Mensch\ 9
" set gfn=Envy\ Code\ R\ 9

if has("gui_running")
  set guioptions-=T
  set t_Co=256
  let g:molokai_original=1
  " colorscheme molokai
  colorscheme github
  set nonu
else
  set t_Co=256
  let molokai_original=0
  " colorscheme molokai
  set background=dark 
  colorscheme solarized
  set nonu
endif

set encoding=utf8
try
    lang en_US
catch
endtry

set ffs=unix,dos,mac "Default file types

highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=red
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver100-iCursor
set guicursor+=n-v-c:blinkon0
set guicursor+=i:blinkon0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undodir=~/.vim_runtime/undodir
set undofile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab
autocmd FileType make setlocal noexpandtab
set shiftwidth=4
set tabstop=4
set smarttab

autocmd FileType c,cpp setlocal ts=8
autocmd FileType c,cpp setlocal sw=8

set lbr

set ai "Auto indent
set si "Smart indet
set wrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <C-space> ?
map <silent> <leader><cr> :noh<cr>
map <leader>q :q<cr>

" Smart way to move btw. window
let g:C_Ctrl_j = 'off'
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>" Use the arrows to something usefull

" Close the current buffer
map <leader>fd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers 
try
  set switchbuf=usetab
  set stal=2
catch
endtry

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

" Delete the whole line in insert mode
imap <C-f> <C-x><C-o>

" Save the file while in insert mode
imap <C-e> <C-o>dd<Esc>

"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

set guitablabel=%t

""""""""""""""""""""""""""""""
" => Snipmate
""""""""""""""""""""""""""""""
let g:snips_author = 'Kumar Devvrat <kumardevvrat@gmail.com>'

""""""""""""""""""""""""""""""
" => FuzzyFinder
""""""""""""""""""""""""""""""
map <leader>ff :FufFile<cr>
map <leader>fr :FufBookmarkDir<cr>
map <leader>fe :FufChangeList<cr>

""""""""""""""""""""""""""""""
" => MRU
""""""""""""""""""""""""""""""
map <leader>e :MRU<Cr>

""""""""""""""""""""""""""""""
" => Completions
""""""""""""""""""""""""""""""
" au FileType python set omnifunc=pythoncomplete#Complete
""let g:ropevim_vim_completion=1
""let g:ropevim_extended_complete=1
""au FileType c set omnifunc=ccomplete#Complete
""let g:SuperTabDefaultCompletionType = "context"
""let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
""let g:SuperTabContextDefaultCompletionType = "<C-n>"
""set completeopt=menuone,longest
""
""let python_highlight_all=1
""
""" automatically close autocompletition window
""autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
""autocmd InsertLeave * if pumvisible() == 0|pclose|endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tagbar 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tagbar_left = 1
nnoremap <silent> <F8> :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ctrlp 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-n> :CtrlP<CR>
let g:ctrlp_working_path_mode = 'c'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Display line numbers to the left
set number

" Show normal mode commands
set showcmd

inoremap jk <Esc>`^
inoremap kj <Esc>`^

nmap ; :
nmap <CR> o<Esc>

let g:Powerline_symbols='compatible'
let g:SuperTabDefaultCompletionType = "context"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Code Formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" inoremap { {}<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap " ""<left>
inoremap ' ''<left>

" inoremap == <space>==<space>
" inoremap != <space>!=<space>
" inoremap = <space>=<right><space>
" inoremap , ,<space>
